---
title: "Next-Day Bitcoin Price Forecast"
author: "Nihad & Vikram"
editor: visual
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    toc-depth: 2
    toc-location: left
    smooth-scroll: true
    toc-title: Contents
    tbl-cap-location: bottom
    lof: true
    lot: true
    theme: spacelab
    highlight: tango
    toc_float:
      collapsed: false
      smooth_scroll: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo    = TRUE, 
                      cache   = TRUE,
                      message = FALSE, 
                      warning = FALSE)
options(scipen = 10)
```

## Required libraries

```{r cache = F}
llibrary(xts)
library(quantmod)
library(ggthemes)
library(dygraphs)
library(tidyverse)
library(urca)
library(tseries)
library(forecast)
library(dplyr)
```

```{r echo=FALSE}
## Get this script present location
#LOC_CODE = dirname(rstudioapi::getSourceEditorContext()$path) ## Quarto
## Set it to working direcotry
#setwd(LOC_CODE)
source("../code/config.R")
source("../code/model_executor.R")
```

## Read bitcoin csv daily price

```{r}
quotes_bitcoin <- read_csv("../data/Bitcoindata.csv", 
                           col_select = c(Date,Close))
```

## We can examine structure of the resulting object:
```{r}
head(quotes_bitcoin)
tail(quotes_bitcoin)
glimpse(quotes_bitcoin)
```

## Let’s also check the class of the Date column:
```{r}
class(quotes_bitcoin$Close)
```
## lets check structure of the whole dataset
```{r}
str(quotes_bitcoin)
```
##Let's transform timeOpen into date:
```{r}
quotes_bitcoin$Date <- as.Date(quotes_bitcoin$Date, format = "%d/%m/%Y")
```
## We have to give the format in which date is originally stored: * %y means 2-digit year, * %Y means 4-digit year * %m means a month * %d means a day
```{r}
class(quotes_bitcoin$Date)
head(quotes_bitcoin)
glimpse(quotes_bitcoin)
```
# Now R understands this column as dates


## Creating xts objects
```{r}
quotes_bitcoin <- 
  xts(quotes_bitcoin[, -1], # data columns (without the first column with date)
      quotes_bitcoin$Date)  # date/time index
```
# Lets see the result:
```{r}
head(quotes_bitcoin)
str(quotes_bitcoin)
```

## Finally, let’s use the ggplot2 package to produce nice visualization. 
## The ggplot2 package expects data to be in long format, rather than wide format. 
## Hence, first we have to convert the tibble to a long tibble:
## Plotting Actual Bitcoin Price
```{r}
tibble(df = quotes_bitcoin) %>%
  ggplot(aes(zoo::index(quotes_bitcoin), df)) +
  geom_line() +
  theme_bw() +
  scale_x_date(date_breaks = "1 year", date_labels = "%b-%Y")+
  labs(
    title = "Actual Bitcoin Price",
    subtitle = paste0("Number of observations: ", length(quotes_bitcoin)),
    caption = "source: RR 2024",
    x="",
    y=""
  )
```

## Plotting Log Transformed Bitcoin Price
```{r}
tibble(df = quotes_bitcoin) %>%
  ggplot(aes(zoo::index(quotes_bitcoin), log(quotes_bitcoin))) +
  geom_line() +
  theme_bw() +
  scale_x_date(date_breaks = "1 year", date_labels = "%b-%Y")+
  labs(
    title = "Log Transformed Bitcoin Price",
    subtitle = paste0("Number of observations: ", length(quotes_bitcoin)),
    caption = "source: RR 2024",
    x="",
    y=""
  )
```
## Plotting 1st Difference Log Operator
```{r}
tibble(df = quotes_bitcoin) %>%
  ggplot(aes(zoo::index(quotes_bitcoin), periodReturn(quotes_bitcoin, period="daily", type="log"))) +
  geom_line() +
  theme_bw() +
  scale_x_date(date_breaks = "1 year", date_labels = "%b-%Y")+
  labs(
    title = "1st Difference Log Operator",
    subtitle = paste0("Number of observations: ", length(quotes_bitcoin)),
    caption = "source: RR 2024",
    x="",
    y=""
  )
```
```{r echo=FALSE}
selectIndex500 <- (zoo::index(quotes_bitcoin) <= as.Date(FIRST_TRAINING_END_DATE,YYY_MM_DD))

#original_500 <- window(ausbeer, start=1995)

original_500 <- quotes_bitcoin[selectIndex500,]
log_transformed <- log(quotes_bitcoin)
log_transformed_500 <- log_transformed[selectIndex500,]
first_diff_log_operator_500 <- periodReturn(original_500, period="daily", type="log")
```
########
#Table 1. Stationary test of data start here
########
